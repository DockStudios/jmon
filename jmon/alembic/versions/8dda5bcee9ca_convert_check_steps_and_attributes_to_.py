"""Convert check steps and attributes to binary fields

Revision ID: 8dda5bcee9ca
Revises: 1bacbaec2512
Create Date: 2023-08-16 04:47:33.629336

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8dda5bcee9ca'
down_revision = '1bacbaec2512'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('check', sa.Column('steps_b', sa.LargeBinary(length=16777215), nullable=True))
    op.add_column('check', sa.Column('attributes_b', sa.LargeBinary(length=16777215), nullable=True))

    # Iterate through rows, binary encode value and update new field
    c = op.get_bind()
    res = c.execute("""
        SELECT id, steps, attributes FROM public.check
    """)
    for row in res:
        check_id, steps, attributes = row

        # Convert values to binary, if set
        if steps:
            steps = steps.encode('utf-8')
        if attributes:
            attributes = attributes.encode('utf-8')

        c.execute(
            sa.sql.text("""
                UPDATE public.check SET steps_b=:steps_b, attributes_b=:attributes_b WHERE id=:check_id
            """),
            check_id=check_id, steps_b=steps, attributes_b=attributes
        )

    op.drop_column('check', 'steps')
    op.drop_column('check', 'attributes')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('check', sa.Column('attributes', sa.VARCHAR(length=1024), autoincrement=False, nullable=True))
    op.add_column('check', sa.Column('steps', sa.VARCHAR(length=1024), autoincrement=False, nullable=True))

    # Iterate through rows, binary encode value and update new field
    c = op.get_bind()
    res = c.execute("""
        SELECT id, steps_b, attributes_b FROM public.check
    """)
    for row in res:
        check_id, steps, attributes = row

        # Convert values to binary, if set
        if steps:
            steps = steps.decode('utf-8')
        if attributes:
            attributes = attributes.decode('utf-8')

        c.execute(
            sa.sql.text("""
                UPDATE public.check SET steps=:steps, attributes=:attributes WHERE id=:check_id
            """),
            check_id=check_id, steps=steps, attributes=attributes
        )

    op.drop_column('check', 'attributes_b')
    op.drop_column('check', 'steps_b')
    # ### end Alembic commands ###
